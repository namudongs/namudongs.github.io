var store = [{
        "title": "Github Pages에 개인 도메인 등록하기",
        "excerpt":"개인 도메인 구매하기   Github Pages 블로그에 개인 도메인(example.com..,)을 연결하기 위해서는 먼저 개인 도메인이 있어야 합니다. 개인 도메인을 구매하는 방법은 여러가지가 있겠지만 보통은 도메인 등록업체를 통해 구매하는 방법이 있습니다.   국내 도메인 등록업체로는 가비아, 카페24, 호스팅케이알 등이 있습니다. 전 Google Domains 를 이용해 구매하여 사용중입니다. 개인 도메인 구매에 관한 자세한 내용은 따로 글을 쓰도록 하겠습니다.   구매한 개인 도메인 연결하기   도메인 등록업체를 통해 도메인을 구매하게 되면, 보통은 도메인 등록업체에서 자체 네임서버를 제공하여 DNS 서비스를 이용합니다. Cloudflare나 DNSEver와 같은 네임서버를 이용할 수도 있습니다. 이것을 왜 얘기하냐면 개인 도메인을 Github Pages에 연결하기 위해서는 이런 DNS 연결이 필요하기 때문입니다.   전 Google Domains 에서 구매하였으므로 Google Domains 의 도메인 설정화면에서 설명하겠습니다.   1. 도메인 설정화면      Google Domains 설정화면으로 이동하면 이렇게 뜹니다. 왼쪽의 메뉴에서 DNS로 이동합니다. 다른 도메인 등록업체에서도 대부분 이렇게 도메인 관리 페이지가 있습니다. 해당 페이지에서 DNS 서비스 메뉴로 이동하면 됩니다.   2. 도메인 DNS 설정      DNS 메뉴로 이동하면 이렇게 현재 사용하고 있는 네임서버가 뜹니다. 전 구글에서 제공하는 기본 네임서버를 이용하니 넘어가도록 하겠습니다.   3. 도메인 DNS 연결      스크롤을 내리면 이렇게 DNS 레코드를 설정할 수 있습니다. 검색 엔진 설정이라던지 이메일 사용시 MX 연결 등을 위 DNS 레코드 설정에서 할 수 있으니 알아두면 좋습니다. Github Pages 로 연결하는 설정은 아래와 같이 해주면 됩니다.                  이름(서브 도메인)(Host)       유형(A, MX ..)(Type)       데이터(IPv4 ..)(Value)       TTL(Time to Live)                       @       A       185.199.109.153       Automatic (1h)                 www       CNAME       USERNAME.github.io       Automatic (1h)           위에서 USERNAME 의 경우 자신이 GitHub Pages 를 개설할때 만든 Repository 이름을 적어주면 됩니다.   설정을 다 했다면 Github 으로 이동합니다.   4. Github   Github 으로 이동했다면 자신의 GitHub Pages Repository 로 이동하여 상단의 Settings 를 클릭합니다.      Settings 화면에서 좌측 메뉴 하단의 Pages 로 이동하게 되면 위와 같은 화면이 뜹니다. 전 현재 개인 도메인을 연결한 상태라 여러분들은 다른 화면이 뜰수도 있습니다. 밑의 Custom domains 란에 자신이 구입한 개인 도메인을 입력한 후 Save 버튼을 눌러주면 됩니다. DNS 연결이 제대로 되었다면 큰 문제 없이 설정이 완료될겁니다.   도메인 연결이 되었다면 잠시 시간이 지난 후 밑의 Enforce HTTPS 에 체크해줍니다. Https 를 사용하는 옵션입니다. 보통 도메인 연결 직후엔 되지 않으나 3~4분 후엔 활성화가 되므로 기다렸다가 체크해주면 됩니다.   페이지 접속하기   연결엔 잠시 시간이 걸릴 수 있으니 설정 직후 개인 도메인으로 접속하면 페이지가 나타나지 않을 수도 있습니다. 조금만 기다리면 정상적으로 페이지가 표시될 겁니다. 주의해야 할 점은 도메인 기간이 만료되면 페이지 접속이 되지 않을 수 있으니 도메인을 미리 연장하거나 만료 이후 위의 GitHub Pages 설정 화면에서 설정한 Custom Domains 를 Remove 해주어야 합니다. 이러면 개인 도메인으론 접속할 수 없고, 처음 제공된 USERNAME.github.io 링크로 접속해야 합니다.   GitHub Pages 에서 제공하는 github.io 도메인도 꽤 좋은 도메인이고, 개인 도메인 구매시엔 보통 10$ 내외의 적지 않은 비용이 필요하니 딱히 개인 도메인이 있거나, 필요한 경우가 아니라면 굳이 개인 도메인을 사용할 필요가 없습니다.   그래도 개인 도메인을 사용하는것이 유용할 때도 많고, 개인 도메인을 소유하고 있다면 메일 주소로도 사용이 가능하니 개발자라면 하나정도 가지고 있는것도 좋다고 생각합니다.  ","categories": ["blog"],
        "tags": ["blog","study"],
        "url": "/blog/%EA%B0%9C%EC%9D%B8%EB%8F%84%EB%A9%94%EC%9D%B8%EA%B9%83%ED%97%99%EC%84%A4%EC%A0%95/",
        "teaser": null
      },{
        "title": "Github Pages Setup Guide",
        "excerpt":"Setup   Github.com &gt; New ‘repository’   Local clone ‘repository’   if use terminal   $ git clone https://github.com/username/username.github.io   New ‘index.html’   &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt;   &lt;h1&gt;Hello World&lt;/h1&gt;   &lt;p&gt;I'm hosted with GitHub Pages.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;   Commit &amp; Sync   $ cd username.github.io $ git add --all $ git commit -m \"Initial commit\" $ git push -u origin master   Work Test   Go ‘http://username.github.io’   reference ‘https://poiemaweb.com/jekyll-basics’   Jekyll Guide   $ jekyll new username.github.io $ cd username.github.io $ bundle install $ bundle exec jekyll serve   if change ‘_config.yml’, you must need restart serve   all done, connect http://localhost:4000 and work test.  ","categories": ["blog"],
        "tags": ["blog"],
        "url": "/blog/%EA%B9%83%ED%97%99%ED%8E%98%EC%9D%B4%EC%A7%80%EC%85%8B%EC%97%85%EA%B0%80%EC%9D%B4%EB%93%9C/",
        "teaser": null
      },{
        "title": "C언어 기초",
        "excerpt":"C언어의 특징   C언어의 장점     프로그램의 효율성을 높일 수 있다.   강력하면서도 유연하다.   프로그래머 중심이다.   다른 시스템으로 이식하기 좋다.   C언어가 쓰이는 곳     Unix 운영 체제   컴퓨터 게임   루카스 필름 (스타워즈 VFX)   임베디드 시스템   자동화 공장   … ….   C언어의 표준  K&amp;R C (Classic C)  유닉스와 함께 제공된 라이브러리가 사실상의 표준 (FEB 22, 1978)   The Spirit of C     프로그래머를 믿어라.   프로그래머가 필요한 일을 하는 것을 방해하지 마라.   언어를 작고 단순하게 유지해라.   한 연산을 할 때 단 한 가지 방법만 제공해라.   호환을 보장할 수 없다 하더라도 속도를 빠르게 해라.   ANSI/ISO C9X Committee     국제적인 문자 집합 추가   64비트 프로세서 대응   과학 공학 수치 계산 적합도 개선 (FORTRAN) 대체   언어를 단순하게 유지   “Committee는 (C가 아닌) C++ 가 크고 야심찬 언어가 되는 것을 허용하는 것에 동의했다.”   The C11 Standard     C99의 일부를 선택적인 기능으로 변경   멀티 프로세서 대응 Concurrent Programming   The C18 Standard     새로운 기능 추가 없이 C11의 결함 수정   소프트웨어 개발의 7가지 단계     목적을 정의한다.   프로그램을 설계한다.   코드를 작성한다.   컴파일 한다.   실행시켜 본다.   시험해보고 오류가 있다면 수정한다.   프로그램을 유지하고 개선해 나간다.  ","categories": ["cpg"],
        "tags": ["cpg","study"],
        "url": "/cpg/C%EC%96%B8%EC%96%B4%EA%B8%B0%EC%B4%88/",
        "teaser": null
      },{
        "title": "파이썬 기초",
        "excerpt":"프로그래밍 기초   프로그래밍이란 ?  프로그래밍 언어 : C, C++, Java, Python, VB, Pascal, Ruby … 영문 (인간) -&gt; 컴파일러 -&gt; 기계어 -&gt; CPU -&gt; 실행 -&gt; 결과물   코딩 공부 하는 법     디버깅 -&gt; 내 의도에 맞게 프로그램 실행 확인   알고리즘, 자료구조 -&gt; 코딩테스트 필수   다른 사람의 소스코드 참조 -&gt; Github -&gt; 오픈소스   주석 -&gt; 코드의 이해 증가   자기가 만들고 싶은 프로그램을 정확하게 정의   좋은 프로그램이란 ?     코드의 가독성   코드의 길이 -&gt; 가독성과 연관   변수의 이름   중복 코드 최소화   파이썬의 장점  간결하고 쉽다 무료, 오픈소스의 강력함, 빠른 개발 속도 (생산성) 협업 수월   파이썬의 활용 분야  GUI 프로그래밍 : pyQT 웹 프로그래밍 : flask, django … 데이터분석, 머신러닝 IOT : 라즈베리파이 (초소형 미니PC)   파이썬 기초 문법   print 문  ’’, “”, ‘’’, “””, 등의 부호로 기본 출력   print('Python Start!') # = Python Start! print(\"Python Start!\") # = Python Start! print(\"\"\"Python Start!\"\"\") # = Python Start! print('''Python Start!''') # = Python Start! print() # = 줄바꿈   separator 옵션 사용   print('P', 'Y', 'T', 'H','O','N', sep='') # = PYTHON print('010', '7777', '7777', sep='-') # = 010-7777-7777 print('python', 'google.com', sep='@') # = python@google.com   end 옵션 사용   print('Welcome To', end=' ') print('IT News', end=' ') print('Web Site') # = Welcome To IT News Web Site   file 옵션 사용   import sys  print('Learn Python', file=sys.stdout) #전자의 내용을 후자의 파일에 저장   format 옵션 사용(d, s, f)`   d (digit) : 3   s (string) : ‘python’   f (float) : 3.141519 …   %s  print('%s %s' % ('one', 'two')) # = one two print('{} {}' .format('one', 'two')) # = one two print('{} {}' .format('one', 2)) #.format 함수가 조금 더 유연함 # = one 2 print('{1} {0}' .format('one', 'two')) #index 번호가 0부터 시작하기에 순서가 바뀌어서 출력됨 # = two one  print('%10s' % ('nice')) #10개의 자릿수 중 문자열이 자리 차지 # =       nice print('{:&gt;10}' .format('nice')) #인위적으로 10자리의 문자열 확보 # =       nice  print('%-10s' % ('nice')) # = nice print('{:10}' .format('nice')) #반대의 경우로 10자리 확보하여 앞에서부터 출력 # = nice  print('{:_&gt;10}' .format('nice')) #앞에 언더바 출력, 총 자릿수는 10개 # = ______nice print('{:^10}' .format('nice')) #중앙 정렬 # = |   nice   |  print('%.5s' %('nice')) # = nice print('%.5s' %('pythonstudy')) #자릿수를 초과하면 지정 자릿수까지의 문자열만 출력 # = pytho print('{:10.5}' %('pythonstudy')) #다른 방법 # = pytho   %d  print('%d %d' % (1,2)) # = 1 2 print('{} {}' .format(1,2)) # = 1 2  print('%4d' % (42)) # =  42 print('{:4d}' .format(42)) # =  42   %f  print('%f' % (3.1415192930230)) # = 3.141519 print('%06.2f' % (3.141592653589793)) #xx.yy x:정수부 자릿수 y=소수부 자릿수 # = 003.14 #총 6개의 자릿수 중에 정수부는 1개이기 때문에 0으로 채우고, 나머지 소수부 출력 print('{:06.2f}' .format(3.141592653589793)) # = 003.14 #동일하게 출력   문자열을 제외한 %d 정수, %f 소수는 신경써야 함 %f 소수의 경우 정수부, 소수부의 자릿수에 유의  ","categories": ["py"],
        "tags": ["py","study"],
        "url": "/py/%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88/",
        "teaser": null
      }]
