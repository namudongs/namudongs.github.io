I"8<h3 id="컴퓨터는-왜-이진법binary-numerical-system-을-사용할까">컴퓨터는 왜 이진법(Binary numerical system) 을 사용할까</h3>

<p>이진법이란 0과 1의 두 숫자를 사용하여 표현하는 방법이다.
많은 트랜지스터들이 스위치 형식으로 복잡한 CPU를 작동시킨다.</p>

<hr />

<h4 id="앨런-튜링">앨런 튜링</h4>

<p>튜링 머신을 개발한 사람</p>

<h4 id="폰-노이만">폰 노이만</h4>

<p>원자폭탄을 개발한 사람</p>

<hr />

<h3 id="내장형-프로그램-방식의-컴퓨터-stored-program-computer">내장형 프로그램 방식의 컴퓨터 (Stored-program computer)</h3>

<p>현대적 컴퓨터의 구조를 정립한 구조를 <code class="language-plaintext highlighter-rouge">폰 노이만 구조</code>라고 부른다.
<code class="language-plaintext highlighter-rouge">입력 &gt; CPU/메모리 처리 &gt; 출력</code></p>

<p>폰 노이만 구조에서 개선되어 현대적 컴퓨터의 구조가 만들어졌다.
<code class="language-plaintext highlighter-rouge">Single System Compute Bus</code></p>

<hr />

<h3 id="컴퓨터-메모리의-기본-구조">컴퓨터 메모리의 기본 구조</h3>

<p><code class="language-plaintext highlighter-rouge">연산은 CPU에서 하고 정보를 저장하는 것은 메모리에서 한다.</code></p>

<p>1차적으로 메모리에 중요한 내용들이 저장이 되어 있다가, CPU가 필요한 것들을 하나하나 가져다가 연산을 하고 연산 결과를 메모리에 돌려주고, 메모리에 저장을 한다.</p>

<p>CPU &gt; 캐시 메모리 &gt; 주기억장치 - 메모리 (캐시 메모리란, 자주 쓰는 정보를 저장하여 속도 향상)</p>

<hr />

<h4 id="순차-접근-sequential-access">순차 접근 (Sequential Access)</h4>

<p>예전의 자기(Magnetic) 테이프 같은 곳에서 쓰였다.
메모리의 저장된 데이터를 순차적으로 하나하나 다 찾는 방식
순차적으로 모두 찾아야 해서 속도가 매우 느리며, 현대 컴퓨터에선 사용하지 않는 방식</p>

<h4 id="임의-접근-random-access">임의 접근 (Random Access)</h4>

<p>현대 컴퓨터에서 사용하는 방식, RAM(Random Access Memory)
순차적으로 찾을 필요 없이 바로바로 접근이 가능한 방식</p>

<hr />

<h3 id="cpu의-기본-구조">CPU의 기본 구조</h3>

<h4 id="프로그램이-시작되는-과정">프로그램이 시작되는 과정</h4>

<p>CPU &lt;&gt; 주기억장치-메모리 &lt; 보조기억장치(HDD,SSD)</p>

<h4 id="언어">언어</h4>

<h5 id="고수준-프로그래밍-언어-high-level-programming-language">고수준 프로그래밍 언어 (High level programming language)</h5>

<p>A = 3
B = 4
C = A + B</p>

<h5 id="어셈블리-언어-assembly-language">어셈블리 언어 (Assembly language)</h5>

<p><code class="language-plaintext highlighter-rouge">니모닉 (Mnemonic)</code>
LOAD			[10]
ADD			  [11]
STORE		  [12]</p>

<h5 id="기계어-machine-code">기계어 (Machine code)</h5>

<p>100110	0000001010
110011	0000001011
111010	0000001100</p>

<hr />

<h4 id="cpu-명령어-집합-instruction-set">CPU 명령어 집합 (Instruction Set)</h4>

<ul>
  <li>ADD - 숫자 두 개를 더한다</li>
  <li>COMPARE - 숫자들끼리 비교한다</li>
  <li>IN - 키보드 같은 입력장치로부터 정보를 입력받는다</li>
  <li>JUMP - 지정된 메모리 주소로 점프한다</li>
  <li>JUMP IF - 조건에 따라 점프한다</li>
  <li>LOAD - 메모리에서 CPU로 정보를 가져온다</li>
  <li>OUT - 출력 장치로 정보를 출력한다</li>
  <li>STORE - 메모리에 정보를 저장한다</li>
</ul>

<hr />

<h4 id="cpu의-구성-요소들">CPU의 구성 요소들</h4>

<p>제어 장치 (Control Unit) &lt;&gt; 여러가지 레지스터들 (Registers)
산술 논리 장치 (Arithmetic Logic Unit) &lt;&gt; 여러가지 레지스터들 (Registers)</p>

<table>
  <thead>
    <tr>
      <th>레지스터 종류</th>
      <th>기능</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>주소 레지스터</td>
      <td>읽거나 쓸 <code class="language-plaintext highlighter-rouge">메모리 주소</code> 저장</td>
    </tr>
    <tr>
      <td>프로그램 카운터</td>
      <td>다음 명령어의 <code class="language-plaintext highlighter-rouge">메모리 주소</code> 저장</td>
    </tr>
    <tr>
      <td>데이터 레지스터</td>
      <td><code class="language-plaintext highlighter-rouge">메모리</code>에서 읽어온 데이터 저장</td>
    </tr>
    <tr>
      <td>명령어 레지스터</td>
      <td><code class="language-plaintext highlighter-rouge">메모리</code>에서 읽어온 명령어 저장</td>
    </tr>
    <tr>
      <td>어큐뮬레이터</td>
      <td>연산에 사용되는 데이터 저장</td>
    </tr>
  </tbody>
</table>

<hr />

<h4 id="cpu가-일하는-방법">CPU가 일하는 방법</h4>

:ET